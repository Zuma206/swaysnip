#!/usr/bin/env python3
# Sway Snip by Zuma206
# Licensed under the GPLv3
import subprocess
import shutil

# Check that the required dependancies are installed for a given function
def dependancies(*dependancies):
  def decorator(func_or_class):
    for dependancy in dependancies:
      if shutil.which(dependancy) is None:
        print(f"Missing dependancy: {dependancy}")
    return func_or_class
  return decorator

# Wrapper for the grim utility
@dependancies("grim")
def grim():
  proc = subprocess.run(["grim", "-"], check=True, capture_output=True)
  return proc.stdout

# Wrapper for the imv utility
@dependancies("imv")
def imv(image, fullscreen=False, wait=False):
  fullscreen_opt = ["-f"] if fullscreen else []
  proc = subprocess.Popen(["imv", *fullscreen_opt, "-"], stdin=subprocess.PIPE)
  proc.stdin.write(image)
  proc.stdin.close()
  if wait:
    proc.wait()
  return proc

class ProcessContext:
  def __init__(self, proc):
    self.__proc = proc
  
  def __enter__(self):
    return self.__proc

  def __exit__(self, *_):
    return self.__proc.terminate()

# Wrapper for the slurp utility
@dependancies("slurp")
class Slurp:
  def __init__(self):
    proc = subprocess.run(["slurp", "-f", "%w %h %x %y"], check=True, capture_output=True)
    self.w, self.h, self.x, self.y = map(float, proc.stdout.decode().split())

  def __repr__(self):
    return f"location({self.w}, {self.h}) size({self.x}, {self.y})"

# Wrapper for the magick -crop option
@dependancies("magick")
def crop(image, geometry):
  geometry_opt = f"{geometry.w}x{geometry.h}+{geometry.x}+{geometry.y}"
  proc = subprocess.run(["magick", "-", "-crop", geometry_opt, "-"], input=image, check=True, capture_output=True)
  return proc.stdout

# Takes a screenshot, and displays it in fullscreen
def main():
  image = grim()
  print("Took screen capture, displaying...")
  with ProcessContext(imv(image, fullscreen=True)):
    geometry = Slurp()
  print(geometry)
  cropped_image = crop(image, geometry)
  imv(cropped_image, wait=True)

if __name__ == "__main__":
  main()
