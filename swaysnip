#!/usr/bin/env python3
# Sway Snip by Zuma206
# Licensed under the GPLv3
import subprocess
import shutil
import i3ipc

# Check that the required dependancies are installed for a given function
def dependancies(*dependancies):
  def decorator(func_or_class):
    for dependancy in dependancies:
      if shutil.which(dependancy) is None:
        print(f"Missing dependancy: {dependancy}")
    return func_or_class
  return decorator

# Wrapper for the grim utility
@dependancies("grim")
def grim():
  proc = subprocess.run(["grim", "-"], check=True, capture_output=True)
  return proc.stdout

# Wrapper for the imv utility
@dependancies("imv")
def imv(image, fullscreen=False, wait=False):
  fullscreen_opt = ["-f"] if fullscreen else []
  proc = subprocess.Popen(["imv", *fullscreen_opt, "-"], stdin=subprocess.PIPE)
  proc.stdin.write(image)
  proc.stdin.close()
  if wait:
    proc.wait()
  return proc

# Maps a process to a context, terminating it on context exit
class ProcessContext:
  def __init__(self, proc):
    self.__proc = proc
  
  def __enter__(self):
    return self.__proc

  def __exit__(self, *_):
    return self.__proc.terminate()

# Represents crop geometry
class Geometry:
  def __init__(self, w, h, x, y):
    self.w = w
    self.h = h
    self.x = x
    self.y = y

# Wrapper for the slurp utility
@dependancies("slurp")
def slurp():
  proc = subprocess.run(["slurp", "-f", "%w %h %x %y"], check=True, capture_output=True)
  return Geometry(*map(float, proc.stdout.decode().split()))

# Wrapper for the magick -crop option
@dependancies("magick")
def crop(image, geometry):
  geometry_opt = f"{geometry.w}x{geometry.h}+{geometry.x}+{geometry.y}"
  proc = subprocess.run(["magick", "-", "-crop", geometry_opt, "-"], input=image, check=True, capture_output=True)
  return proc.stdout

# Get's the currently focused output using sway's IPC system
def get_focused_output():
  outputs = i3ipc.Connection().get_outputs()
  return next(filter(lambda output: output.focused, outputs))

# Takes a screenshot, and displays it in fullscreen
def main():
  image = grim()
  print("Took screen capture, displaying...")
  with ProcessContext(imv(image, fullscreen=True)):
    geometry = slurp()
  print(geometry)
  cropped_image = crop(image, geometry)
  focused_output = get_focused_output()
  print(focused_output.name, focused_output.scale)
  imv(cropped_image, wait=True)

if __name__ == "__main__":
  main()
